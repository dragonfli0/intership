import os
from pathlib import Path
import re
from datetime import datetime
import random

def get_new_user_greeting():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    new_user_greetings = [
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É! –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Å—Ç—É–¥–µ–Ω—Ç!",
        "‚ú® –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å!",
        "üöÄ –û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –ö –Ω–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –Ω–æ–≤—ã–π —Å—Ç—É–¥–µ–Ω—Ç!",
        "üëã –ü—Ä–∏–≤–µ—Ç! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ!",
        "üìö –û—Ç–ª–∏—á–Ω–æ! –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Å—Ç—É–¥–µ–Ω—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è!",
        "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –æ—Ç—á–µ—Ç–∞!",
        "ü§ñ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –ì–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ?",
        "üåû –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø–µ—Ä–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–∞–∫—Ç–∏–∫–µ!",
        "üìñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞—á–Ω–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö!",
        "üíª –û—Ç–ª–∏—á–Ω–æ! –ù–æ–≤—ã–π —Å—Ç—É–¥–µ–Ω—Ç –≤ —Å–∏—Å—Ç–µ–º–µ! –ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Ñ–∞–π–ª–∞!"
    ]
    return random.choice(new_user_greetings)

def get_existing_user_greeting(username):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    existing_user_greetings = [
        f"üëã –†–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å! –°—Ç—É–¥–µ–Ω—Ç '{username}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –°—Ç—É–¥–µ–Ω—Ç '{username}' —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!",
        f"üìö –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ! –°—Ç—É–¥–µ–Ω—Ç '{username}' —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ!",
        f"üëç –û—Ç–ª–∏—á–Ω–æ! –°—Ç—É–¥–µ–Ω—Ç '{username}' —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ!",
        f"üîç –ù–∞–π–¥–µ–Ω–æ! –°—Ç—É–¥–µ–Ω—Ç '{username}' —É–∂–µ –∏–º–µ–µ—Ç —Ñ–∞–π–ª README!",
        f"üéâ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {username}! –í–∞—à —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
        f"‚ú® –ü—Ä–∏–≤–µ—Ç, {username}! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!",
        f"üöÄ –û—Ç–ª–∏—á–Ω–æ! {username} —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É!",
        f"üåü –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username}! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã!",
        f"ü§ñ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {username}! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å –≤–∞—à–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏!"
    ]
    return random.choice(existing_user_greetings)

def get_general_greeting():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    general_greetings = [
        "üìö –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞–º–∏ –ø–æ –ø—Ä–∞–∫—Ç–∏–∫–µ!",
        "üéâ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ —Å–∏—Å—Ç–µ–º–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è README —Ñ–∞–π–ª–æ–≤!",
        "‚ú® –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ì–æ—Ç–æ–≤—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ—Ç—á–µ—Ç–∞–º–∏ –ø–æ –ø—Ä–∞–∫—Ç–∏–∫–µ?",
        "üöÄ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏ –∑–∞–ø—É—â–µ–Ω–∞!",
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞—á–Ω–µ–º —Ä–∞–±–æ—Ç—É —Å –æ—Ç—á–µ—Ç–∞–º–∏!",
        "üåü –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—á–µ–±–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤!",
        "ü§ñ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ! –ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—Ç—á–µ—Ç–∞–º–∏!",
        "üìñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤!",
        "üíª –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —É—á–µ–±–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω–∞!",
        "üåû –î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ì–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –Ω–∞–π—Ç–∏ –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–∞–∫—Ç–∏–∫–µ?"
    ]
    return random.choice(general_greetings)

def find_readme_files():
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ README —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    readme_files = []
    possible_names = ['README1.md', 'README2.md', 'READMY1.md', 'READMY2.md', 'ReadMe.md', 'README.md', 'readme.md']
    
    for file_name in possible_names:
        if Path(file_name).exists():
            readme_files.append(file_name)
    
    # –¢–∞–∫–∂–µ –∏—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º README_*.md
    for file in Path('.').glob('README_*.md'):
        if file.name not in readme_files:
            readme_files.append(file.name)
    
    return readme_files

def extract_name_from_readme(file_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –∏–∑ –§–ò–û –≤ README —Ñ–∞–π–ª–µ"""
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            content = file.read()
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –§–ò–û (–±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ)
            fio_patterns = [
                r'–§–ò–û[:\s\-]+\**([–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+)',
                r'—Ñ–∏–æ[:\s\-]+\**([–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+)',
                r'–§–ò–û[:\s\-]+\**([^\n\r\(\)\[\]]+)',
                r'—Ñ–∏–æ[:\s\-]+\**([^\n\r\(\)\[\]]+)',
            ]
            
            for pattern in fio_patterns:
                match = re.search(pattern, content, re.IGNORECASE | re.MULTILINE)
                if match:
                    fio = match.group(1).strip()
                    # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    fio = re.sub(r'[*_\-:]+', '', fio).strip()
                    fio = re.sub(r'[^–ê-–Ø–∞-—è–Å—ë\s]', '', fio).strip()
                    fio_parts = fio.split()
                    
                    if len(fio_parts) >= 3:
                        return fio_parts[1]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è (–≤—Ç–æ—Ä–æ–µ —Å–ª–æ–≤–æ)
                    elif len(fio_parts) >= 1:
                        return fio_parts[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –æ–±—â–µ–º—É –ø–∞—Ç—Ç–µ—Ä–Ω—É –§–ò–û
            general_pattern = r'([–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+)'
            match = re.search(general_pattern, content)
            if match:
                fio = match.group(1).strip()
                fio_parts = fio.split()
                if len(fio_parts) >= 3:
                    return fio_parts[1]
            
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return None

def create_user_metrics_file():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("\n" + "=" * 60)
    print("üìù –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –§–ê–ô–õ–ê –° –ú–ï–¢–†–ò–ö–ê–ú–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
    print("=" * 60)
    
    # –í—ã–≤–æ–¥–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(get_new_user_greeting())
    print("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    group = input("–ì—Ä—É–ø–ø–∞: ").strip()
    fio = input("–§–ò–û (–ø–æ–ª–Ω–æ—Å—Ç—å—é): ").strip()
    practice_type = input("–í–∏–¥ –ø—Ä–∞–∫—Ç–∏–∫–∏: ").strip()
    practice_number = input("–ù–æ–º–µ—Ä –ø—Ä–∞–∫—Ç–∏–∫–∏: ").strip()
    specialty_code = input("–ö–æ–¥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: ").strip()
    specialty_name = input("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: ").strip()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –§–ò–û
    fio_parts = fio.split()
    if len(fio_parts) >= 3:
        filename = f"README_{fio_parts[0]}_{fio_parts[1][0]}{fio_parts[2][0]}.md"
    else:
        filename = f"README_{fio.replace(' ', '_')}.md"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ñ–∞–π–ª
    counter = 1
    original_filename = filename
    while Path(filename).exists():
        filename = f"{original_filename[:-3]}_{counter}.md"
        counter += 1
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
    content = f"""# –û—Ç—á–µ—Ç –ø–æ –ø—Ä–∞–∫—Ç–∏–∫–µ

## –ú–µ—Ç—Ä–∏–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞

- **–ì—Ä—É–ø–ø–∞**: {group}
- **–§–ò–û**: {fio}
- **–í–∏–¥ –ø—Ä–∞–∫—Ç–∏–∫–∏**: {practice_type}
- **–ù–æ–º–µ—Ä –ø—Ä–∞–∫—Ç–∏–∫–∏**: {practice_number}
- **–ö–æ–¥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏**: {specialty_code}
- **–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏**: {specialty_name}
"""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    try:
        with open(filename, 'w', encoding='utf-8') as file:
            file.write(content)
        print(f"\n‚úÖ –§–∞–π–ª '{filename}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        print(f"üìÅ –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown")
        return filename
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —Ü–∏–∫–ª–æ–º –∑–∞–ø—Ä–æ—Å–∞ –∏–º–µ–Ω–∏"""
    
    # –í—ã–≤–æ–¥–∏–º –æ–±—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    print(get_general_greeting())
    print("=" * 60)
    print("üìö –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –û–¢–ß–ï–¢–ê–ú–ò –ü–û –ü–†–ê–ö–¢–ò–ö–ï")
    print("=" * 60)
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ README —Ñ–∞–π–ª—ã
    readme_files = find_readme_files()
    
    if not readme_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ README —Ñ–∞–π–ª–∞ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        
        # –°—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª
        new_file = create_user_metrics_file()
        if new_file:
            readme_files = [new_file]
        else:
            return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º–µ–Ω–∞ –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ (—É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã)
    names_from_files = {}
    unique_names = set()
    
    for file_path in readme_files:
        name = extract_name_from_readme(file_path)
        if name:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –∏–º–µ–Ω–∏
            if name not in unique_names:
                names_from_files[file_path] = name
                unique_names.add(name)
    
    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
    if not names_from_files:
        print("\n‚ùå –ù–∏ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –§–ò–û")
        new_file = create_user_metrics_file()
        if new_file:
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            readme_files = find_readme_files()
            name = extract_name_from_readme(new_file)
            if name:
                names_from_files[new_file] = name
        else:
            return
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –∑–∞–ø—Ä–æ—Å–∞ –∏–º–µ–Ω–∏
    while True:
        try:
            print("\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∏–ª–∏ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):")
            input_name = input(">>> ").strip()
            
            if input_name.lower() in ['–≤—ã—Ö–æ–¥', 'exit', 'quit', 'q']:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            if not input_name:
                print("‚ö†Ô∏è  –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∏–º–µ–Ω–∞–º–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤
            matched = False
            for file_path, file_name in names_from_files.items():
                if input_name.lower() == file_name.lower():
                    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    print(get_existing_user_greeting(file_name))
                    print(f"   –ò–º—è –Ω–∞–π–¥–µ–Ω–æ –≤ —Ñ–∞–π–ª–µ: {file_path}")
                    matched = True
                    break
            
            if not matched:
                print(f"‚ùå –ò–º—è '{input_name}' –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏–º–µ–Ω–∞–º–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤")
                print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–º–µ–Ω–∞: {', '.join(names_from_files.values())}")
                
                # –°—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                print("\n–ü–æ—Ö–æ–∂–µ, –≤—ã –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏.")
                new_file = create_user_metrics_file()
                if new_file:
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–æ–∫
                    name = extract_name_from_readme(new_file)
                    if name:
                        names_from_files[new_file] = name
                        print(f"‚úÖ –ù–æ–≤–æ–µ –∏–º—è –¥–æ–±–∞–≤–ª–µ–Ω–æ: '{name}'")
                        print(f"üéâ –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–º–µ–Ω–∞: {', '.join(names_from_files.values())}")
                
        except KeyboardInterrupt:
            print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            break
        except Exception as e:
            print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()