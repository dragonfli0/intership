#Иванова 11ИС, задачи на зимние
from calendar import month
from math import tan, pi, pow

#Функция преобразования строки в числовое значение (целое или вещественное)
def digvar(n):
    if (n.replace('-', '', 1).isdigit() or n.isdigit()):  #Проверка, является ли строка числом (включая отрицательные значения)
        return int(n)  # Преобразование в целое число
    elif (n.replace('.', '', 1).replace('-', '', 1).isdigit()):
        return float(n)  #Преобразование в число с плавающей запятой
    else:
        print("Error: переменная введена с ошибкой")  #Сообщение об ошибке

def space(): #Функция для расчета площади
    length = digvar(input("Введите длину участка (футы): ")) #Просим пользователя ввести длину в футах
    width = digvar(input("Введите ширину участка (футы): ")) #Просим пользователя ввести ширину в футах
    if length < 0 or width < 0 : #Проверка на корректность значений
        print("Error: Данные введены некорректно") #Сообщение об ошибке
    else:
        space = length*width/43560 #Расчет площади и перевод в акры
        print(f'Площадь участка равна {space} акров.') #Вывод площади в акрах

def temp(): #Функция для нахождения энергии и стоимости нагрева воды
    mass = digvar(input("Введите массу воды в гр: ")) #Просим пользователя ввести массу в граммах
    razn_temp = digvar(input("Введите разницу температур: ")) #Просим пользователя ввести разницу температур
    C = 4.186 #удельная теплоемкость воды
    if mass < 0 or razn_temp < 0: #Проверка на корректность значений
        print("Error: Данные введены некорректно")  #Сообщение об ошибке
    else:
        q = mass * C * razn_temp #Расчет на затраченную энергию
        print(f"Потребуется энергия {q} Дж для нагрева воды массой {mass} грамм") #Вывод кол-ва энергии
        price = 8.9 * q / 3600000 #Расчет стоимости в центах
        print(f'Стоимость нагрева воды составит {price} центов.') #Вывод стоимости

def polygon(): #Функция для расчета площади многоугольника
    s = digvar(input('Введите длину стороны: '))
    n = digvar(input('Введите кол-во сторон: '))
    if s < 0 or n <= 0: #Проверка на корректность значений
        print("Error: Данные введены некорректно")  #Сообщение об ошибке
    else:
        area = (n * s ** 2)/(4 * tan(pi/n)) #Расчет площади многоугольника
        print(f"Площадь многоугольника равна: {area}.")

def number(): #Функция для распределения чисел в порядке возрастания
    num_1 = digvar(input('Введите первое число: '))
    num_2 = digvar(input('Введите второе число: '))
    num_3 = digvar(input('Введите третье число: '))
    mn_num = min(num_1, num_2, num_3) #Минимальное значение
    mx_num = max(num_1, num_2, num_3) #Максимальное значение
    md_num = num_1+num_2+num_3 - (mn_num+mx_num) #Среднее значение
    print(f'Числа в порядке возрастания: {mn_num, md_num, mx_num}.')

def seasons(): #Функция для нахождения сезонов
    months = {
        'январь': 1, 'февраль': 2, 'март': 3, 'апрель': 4, 'май': 5, 'июнь': 6, 'июль': 7, 'август': 8, 'сентябрь': 9, 'октябрь': 10, 'ноябрь': 11, 'декабрь': 12
    } #Вводим месяца
    day = int(input("Введите день: "))
    mon = input("Введите название месяца: ").lower()
    mon_num = months[mon]
    if day <= 0: #Проверка на корректность значений
        print("Error: Данные введены некорректно")  # Сообщение об ошибке
    else:
        if mon_num in [12, 1, 2] or (mon_num == 3 and day < 20): #Условия для зимы
            season = 'Зима'
        elif mon_num in [3, 4, 5] or (mon_num == 6 and day <= 20): #Условия для весны
            season = 'Весна'
        elif mon_num in [6, 7, 8] or (mon_num == 9 and day <= 22): #Условия лета
            season = 'Лето'
        else:
            season = 'Осень'
        print(f'Сезон: {season}')

def estimate(): #Функция для оценивания
    evaluation = {
    'A+': 4.0, 'A': 4.0, 'A-': 3.7, 'B+': 3.3, 'B': 3.0, 'B-': 2.7, 'C+': 2.3, 'C': 2.0, 'C-': 1.7, 'D+': 1.3, 'D': 1.0, 'F': 0
    } #Ввод оценок
    def user_ev(): #Функция для получения буквенной оценки от пользователя
        eval_us = input('Введите буквенную оценку: ')  # Запрашиваем у пользователя ввод
        return eval_us
    def estimate(user_ev):  #Функция для сопоставления буквенной оценки с числовой
        if user_ev in evaluation:  #Проверка есть ли введенная оценка в словаре
            return evaluation[user_ev]
        else:
            return None
    eval_us = user_ev()  #Получаем от пользователя буквенную оценку
    result = estimate(eval_us)
    if result is not None: #Если результат не равен None
        print(f'Ваша числовая оценка: {result}')  #Выводим числовую оценку
    else:
        print("Error: Данные введены некорректно")  #Сообщение об ошибке

        print('Выберите из следующих: {}'.format(','.join(evaluation)))  #Выводим доступные оценки, чтобы пользователь мог выбрать.

def wave(): #Функция для излучения
    waves = digvar(input("Введите значение частоты волны: ")) #Запрашиваем частоту волны и проверяем ее корректность
    if waves <= 0: #Проверка на корректность значений
        return 0
    else:
        # Определяем тип волны в зависимости от частоты
        if waves < 3 * pow(10, 9):
            print("Радиоволны")
            return("Радиоволны")
        elif waves < 3 * pow(10, 12):
            print("Микроволны")
            return("Микроволны")
        elif waves < 4.3 * pow(10, 14):
            print("Инфракрасное излучение")
            return("Инфракрасное излучение")
        elif waves < 7.5 * pow(10, 14):
            print("Видимое излучение")
            return("Видимое излучение")
        elif waves < 3 * pow(10, 17):
            print("Ультрафиолетовое излучение")
            return("Ультрафиолетовое излучение")
        elif waves < 3 * pow(10, 19):
            print("Рентгеновское излучение")
            return("Рентгеновское излучение")
        else:
            print("Гамма излучение")
            return("Гамма излучение")


def Caesar(): #Код Цезаря
    text = input("Введите текст для шифрования/дешифрования: ") # Запрашиваем у пользователя текст для шифрования/дешифрования
    shift = digvar(input("Введите число символов для сдвига: ")) # Запрашиваем у пользователя сдвиг для шифрования/дешифрования
    result = ""
    if shift < 0 : #Проверка на корректность сдвига
        print("Error: Данные введены некорректно")  # Сообщение об ошибке
        return 0
    else:
        #Шифрование/дешифрование текста с помощью сдвига по алгоритму Цезаря
        for char in text:
            if char.isalpha():
                #Определяем алфавит (для заглавных и строчных букв)
                if char.islower():
                    alphabet = 'abcdefghijklmnopqrstuvwxyz'
                else:
                    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
                # Находим позицию символа и сдвигаем ее
                current_pos = alphabet.index(char)
                new_pos = (current_pos + shift) % len(alphabet)
                result += alphabet[new_pos]
            else:
                result += char

        print(result)
        return result

#Вызываем функции для начала оценивания.
space()
temp()
polygon()
number()
seasons()
estimate()
wave()
Caesar()